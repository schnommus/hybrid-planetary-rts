TOP:
- Will need an entity deletion queue at some point
- file-mapped resource fetcher system *DONE*
- xml type system *DONE*
- Refactor craploads of pass-ins into 'Game' class (and main loop etc.) 'Universe' design pattern *DONE*
- Selection system *DONE* images *DONE*

For sprites that 'fly'; give spritecomponent a local offset parameter to center about the object's shadow. *DONE*

ENABLES:
-File-mapped resource fetcher system *DONE*
-Dynamic level editor loading of entity types *DONE*
-Using VBOs for everything
	-Draw ordering by append & sort!
	-Stuff on same draw level is rendered top to bottom? Would be appropriate.

if entFactory creates
class AttributeList { map<string, string> atts; String(key); Int(key); float()... }

Components could implement
static SpriteComponent *SpriteComponent::FromAttributes( AttributeList att ) {
	return new SpriteComponent( att.String("file_name"), att.Int("animation_frames"), ... );
}

So EntFactory builds on init()
map< typenames::string, vector<ComponentDescriptor> >

(ComponentDescriptor.type; ComponentDescriptor.attributes)

And then on a request to construct, does physical component creation returning entity pointer.

At the end of components.h->
#define register_component(s, t) if( desc.name == s ) return t::FromAttributes( desc.attributes )
Component *FromDescriptor( ComponentDescriptor & desc ) {
	register_component("sprite-component", SpriteComponent);
	...
}

Set vblank_mode=0 env. variable for fps analysis in linux

-Add LevelEditing ProcessingSystem class; and put all level stuff in there. *DONE*
-Show string of currently placing type *DONE* (Images = better)
-Just pass everything relevent to the leveleditor which will hack it's way into other systems (if necessary) *DONE*
-It should be possible to render terrain nodes within the leveleditor class without interfering with the RenderSystem *DONE* (Compiler flag)
-Gotta delete nodes that are nearby within a threshold. *DONE*
-Also just adding a delete function in the first place would be useful. *DONE*

-File-mapped resource fetcher system; to keep media directories isolated.
-Move type descriptors in the level system into a class to get rid of ugly array indexing -> probably should implement fully-fledged type system if this is gonna happen *DONE*
-Move drawing of selected types into a function because it smells *DONE*
-Fix the ReverseUVTransform function. Probably some float/mathematical anomaly; but only on one pole of the planetoid, it's calculations stuff up in about a 20 pixel radius.
-Move star system into minimap code *DONE*
-Use VBOs for:
	-Star system *DONE*
	-Tile drawing (Will involve concatenating tileset & storing tiles in a grid of pointers to tile properties? Flyweight.)
-For tiles:
	-Change names of images to a number
	-Write program that converts numbered terrain pieces into terrain spritesheet
	-Create a class that represents terrain pieces [part of the type system] (Just use existing TerrainNode component?!)
	-^^ is used for nodes
	-BackGroundterrain keeps a pointer to the nearest node's [typesystem terrain class]
	-Used for sfx (i.e snow; no snow; tracks etc, difficult to move)
	-Backgroundterrain will instead use flyweight pattern; which is 2D array of pointers to parent node [or however typesystem goes]
	-Rest of game can query background system; and pull out a terrain type pointer whenever need arises.

TYPE SYSTEM
-Have a directory full of entity XML files. (Or perhaps JSON) *DONE*
-Auto-scan the directory to populate type database (esp. for level editor!) (filename INSIGNIFICANT. but I.e <type-name: tree> ) *DONE*
-XML illustrates all the components; and component parameters. *DONE*
-xml is used to instantiate the entity; creating it from the description. *DONE*

-Autoscan directory for all xml filenames
-Build map of <type-name: tree> 'tree' to a list of strings (component names) -> [arguments](int/string/float component arguments)
-Type map is queried to create types of entity.
	-Entity factory exists that creates an entity from a list of component definitions -> see below
	-Component factory exists that creates a component from a component string and list of arguments

BEHAVIOUR
- Add a 'patrol' component; with variable parameters that a system will use to enact on them.

GAMEPLAY STUFF
- Player is a *single* 'drone', with movement of the drone detached from the global camera.
- Selection system for building stuff (Move up to a scaffold to enable construction => mechanic?)
- Implement fading of terrain on change OR craploads of intermediate terrain types (probably better).
i.e:
Low T, Low P; Desolate moon.
High T, Low P; Mercury or somewhat molten
High T, High P; Venus-like
Low T, High P; Gassy; either giant or methane lakes etc

-Perhaps scatter the archetypes of amino generators (randomly) across the map at the beginning; hidden in artefacts (archives)
-Amino generators will only function when planetoid has an appropriate habitat for the relevant units that are being created.

Terrain Changing:
TerrainNodes have a TerraformingID; which is what is loaded from a level description
(alternatively; index numbers from entity type; easier, can still use level editor)
The terraformingID is used to index the actual SpriteComponent so
TerrainNodes will now have a SetTerraformingID function and an UpdateToCurrentBiome function
Whenever biome changes; update ALL UpdateToCurrentBiome; then RecalculateTerrain.

OR BETTER

Introduce <transform_on_biome type='icy' newentity='icytree'> tag
which can also be used for terrain nodes! :D
Then recalculateTerrain etc.
All called by BiomeManager etc.
i.e <transform_on_biome type='arid' newentity='terrain_desert1'>
This works good for i.e gas planet. But there is the possibility of preserving state by having 10 types per state; just numbered differently; with different relationships. 

Relationships:
Temperate -> Water, Ice, Tropical, Arid
Tropical -> Water, Temperate, Arid, Sulfuric, Mineral
Water -> Gas, Sulfuric, Ice, Tropical, Temperate
Arid-> Barren, Mineral, Ice, Temperate, Tropical
Ice-> Water, Temperate, Arid, Gas, Barren
Gas-> Water, Ice
Sulfuric-> Water, Tropical
Mineral-> Arid, Tropical
Barren-> Arid, Ice


<Gas>		<Sulfuric>
       <water>
<Ice><temperate><tropical>
       <arid>
<Barren>	<Mineral>


BASE TEXTURES
temperate:
1: Deep Water
2: Shallow water
3: Deep ice
4: Icy ground
5: Desert
6: Rocky Desert
7: Wavy Desert (Tile align with shallow water)
8: Patchy grass
9: Light grass
10: Heavy grass

Ice:
1: Icy lake
2: Icy ground
3: Crystalline ice
4: Deep ice
5: Icy ground
6: Slightly more icy ground
7: Icy ground
8: Iced grass patchy
9: Iced grass light
10: Iced grass heavy

Arid:
1: Shallow water
2: Wavy desert
3: Icy gound
4: Rocky desert
5: Desert
6: Rocky desert
7: Wavy desert
8: Dead grass patchy
9: Dead grass light
10: Dead grass heavy

Tropical:
1: Shallow water
2: Wavy desert
3: Icy ground
4: Patchy grass
5: Patchy grass
6: Light grass
7: Patchy grass
8: Light grass
9: Heavy grass
10: Rainforest floor-ish

Water:
1: Really deep water
2: Deep water
3: Icy ground
4: Shallow water
5: Shallow water
6: Deep water
7: Shallow water
8: Shallow water
9: Deep water
10: Wavy desert

Sulfuric:
1: Red water
2: Yellow water (shallow'er)
3: Wavy desert
4: Red rock light
5: Red rock light
6: Red rock heavy
7: Red rock light
8: Red rock light
9: Red rock heavy
10: Blackened rocks

Gas:
1: Gaseous swirls
2: Gaseous lines
3: Gaseous swirls 2
4: Gaseos lines 2
5: Gaseous lines
6: Gaseous lines
7: Gaseous lines
8: Gaseous lines
9: Gaseous lines
10: Liquid pocket

Mineral:
1: Precious gems 1
2: Moondirt
3: Ground crystals
4: Precious gems 2
5: Moondirt
6: Precious gems 2
7: Moondirt with marks
8: Moondirt
9: Precious gems 1
10: Precious gems 3

Barren:
1: Moonrocks 1
2: Moonrocks 2
3: Moondirt 1..
10: Moondirt with marks
